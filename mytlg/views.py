import datetime
import json
from io import BytesIO

import pytz
import requests
from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.contrib import messages as err_msgs

from cfu_mytlg_admin.settings import MY_LOGGER, BOT_TOKEN, TIME_ZONE
from mytlg.gpt_processing import ask_the_gpt
from mytlg.models import Themes, BotUser, Channels, TlgAccounts, SubThemes, NewsPosts, AccountTasks
from mytlg.serializers import SetAccDataSerializer, ChannelsSerializer, NewsPostsSerializer, WriteNewPostSerializer, \
    WriteTaskResultSerializer
from mytlg.tasks import gpt_interests_processing, subscription_to_new_channels, scheduled_task_example


class WriteUsrView(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """

    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É WriteUsrView: {request.data}')

        if not request.data.get("token") or request.data.get("token") != BOT_TOKEN:
            MY_LOGGER.warning(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∑–∞–ø—Ä–æ—Å–∞: {request.data.get("token")} != {BOT_TOKEN}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='invalid token')

        MY_LOGGER.debug(f'–ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ –≤ –ë–î')
        bot_usr_obj, created = BotUser.objects.update_or_create(
            tlg_id=request.data.get("tlg_id"),
            defaults={
                "tlg_id": request.data.get("tlg_id"),
                "tlg_username": request.data.get("tlg_username"),
            }
        )
        MY_LOGGER.success(f'–î–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ {"—Å–æ–∑–¥–∞–Ω—ã" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω—ã"} –¥–∞—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.')
        return Response(data=f'success {"write" if created else "update"} object of bot user!',
                        status=status.HTTP_200_OK)


@method_decorator(csrf_exempt, name='dispatch')
class StartSettingsView(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """

    def get(self, request):
        context = {
            "themes": Themes.objects.all()
        }
        return render(request, template_name='mytlg/start_settings.html', context=context)

    @csrf_exempt
    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–Ω–∞–ª–æ–≤. {request.POST}')

        MY_LOGGER.debug(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞')
        tlg_id = request.POST.get("tlg_id")
        selected_channels_lst = request.POST.getlist("selected_channel")
        check_selected_channels = list(map(lambda i_ch: i_ch.isdigit(), selected_channels_lst))
        if not tlg_id or not tlg_id.isdigit() or not all(check_selected_channels):
            MY_LOGGER.warning(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
            return HttpResponse(content='Request params is not valid', status=400)

        MY_LOGGER.debug(f'–°–≤—è–∑—ã–≤–∞–µ–º –≤ –ë–î —é–∑–µ—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏')
        try:
            bot_usr_obj = BotUser.objects.get(tlg_id=int(tlg_id))
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–û–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ —Å tlg_id=={tlg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.')
            return HttpResponse(f'User not found', status=404)

        selected_channels_lst = list(map(lambda i_ch: int(i_ch), selected_channels_lst))
        channels_qset = Channels.objects.filter(pk__in=selected_channels_lst)
        MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —é–∑–µ—Ä—É —Å tlg_id=={tlg_id} –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ '
                        f'PK={selected_channels_lst}\n{channels_qset}')
        bot_usr_obj.channels.set(channels_qset)
        return render(request, template_name='mytlg/success.html')


@method_decorator(decorator=csrf_exempt, name='dispatch')
class WriteInterestsView(View):
    """
    –í—å—é—à–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    def get(self, request):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.')
        context = {
            'interest_examples': (
                '–§—É—Ç–±–æ–ª, –ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏ –≤—Å—ë –≤ —ç—Ç–æ–º –¥—É—Ö–µ',
                '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∞–∫—Ü–∏–∏ —Ç–æ–ø–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π',
                '–ñ–∏–≤–æ—Ç–Ω—ã–µ, –Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∏–ª—ã–µ. –¢–∞–∫–∏–µ –∫–∞–∫ –∫–æ—Ç–∏–∫–∏ –∏ —Å–æ–±–∞—á–∫–∏, –Ω–æ –Ω–µ –∫—Ä–æ–∫–æ–¥–∏–ª—ã –∏ –∑–º–µ–∏.',
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç –≤—Å—ë',
                '–ë–∏–∑–Ω–µ—Å, —Ç–æ –Ω–∞ —á—ë–º –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –ø—Ä–æ—Ä—ã–≤–Ω—ã–µ –∏–¥–µ–∏!'
            )
        }
        return render(request, template_name='mytlg/write_interests.html', context=context)

    def post(self, request):
        """
        –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {request.POST}')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        tlg_id = request.POST.get("tlg_id")
        interests = request.POST.getlist("interest")
        when_send_news = request.POST.get('when_send_news')

        check_interests = [i_interest for i_interest in interests if i_interest != '']
        if len(check_interests) < 1:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã 1 –∏–Ω—Ç–µ—Ä–µ—Å')
            err_msgs.error(request, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –∏–Ω—Ç–µ—Ä–µ—Å')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        elif not when_send_news:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. '
                              f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
            err_msgs.error(request, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        elif not tlg_id or not tlg_id.isdigit():
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. '
                              f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tlg_id')
            err_msgs.error(request, f'–û—à–∏–±–∫–∞: –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–æ—Ä–º—É –∏–∑ Telegram?')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        MY_LOGGER.debug(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å GPT –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        gpt_interests_processing.delay(interests=check_interests, tlg_id=tlg_id)

        MY_LOGGER.debug(f'–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
        try:
            bot_usr_obj = BotUser.objects.get(tlg_id=int(tlg_id))
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –Æ–∑–µ—Ä —Å tlg_id=={tlg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!')
            err_msgs.error(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ –Ω–∞–π–¥–µ–Ω –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start')
            return redirect(to=reverse_lazy('mytlg:write_interests'))
        bot_usr_obj.when_send_news = when_send_news
        bot_usr_obj.save()

        context = dict(
            header='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
            description=f'üëå –û–∫–µ–π. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –Ω–æ–≤–æ—Å—Ç–∏ üóû –≤ {when_send_news} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
            btn_text='–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!'
        )
        return render(request, template_name='mytlg/success.html', context=context)


class SetAccRunFlag(APIView):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    """

    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞')
        ser = SetAccDataSerializer(data=request.data)

        if ser.is_valid():
            MY_LOGGER.debug(f'–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω')

            if ser.data.get("token") == BOT_TOKEN:
                MY_LOGGER.debug(f'–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω')

                try:
                    TlgAccounts.objects.filter(pk=int(ser.data.get("acc_pk"))).update(is_run=ser.data.get("is_run"))
                except ObjectDoesNotExist:
                    MY_LOGGER.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –æ–±—ä–µ–∫—Ç TlgAccounts —Å PK={ser.data.get("acc_pk")}')
                    return Response(data={'result': f'Not found object with primary key == {ser.data.get("acc_pk")}'},
                                    status=status.HTTP_404_NOT_FOUND)

                return Response(data={'result': 'is_run flag successfully changed'}, status=status.HTTP_200_OK)

            else:
                MY_LOGGER.warning(f'–¢–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {ser.data.get("token")}')
                return Response({'result': 'invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        else:
            MY_LOGGER.warning(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ó–∞–ø—Ä–æ—Å: {request.data}')
            return Response({'result': 'Not valid data'}, status.HTTP_400_BAD_REQUEST)


class GetChannelsListView(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    """

    def get(self, request):
        """
        –í –∑–∞–ø—Ä–æ—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä token=—Ç–æ–∫–µ–Ω –±–æ—Ç–∞.
        """
        MY_LOGGER.info(f'–ü–æ—Å—Ç—É–ø–∏–ª GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {request.GET}')

        token = request.query_params.get("token")
        if not token or token != BOT_TOKEN:
            MY_LOGGER.warning(f'–¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ token={token}')
            return Response(status=status.HTTP_400_BAD_REQUEST)

        acc_pk = request.query_params.get("acc_pk")
        if not acc_pk or not acc_pk.isdigit():
            MY_LOGGER.warning(f'acc_pk –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ acc_pk={acc_pk}')
            return Response(status=status.HTTP_400_BAD_REQUEST)

        try:
            channels_qset = TlgAccounts.objects.get(pk=int(acc_pk)).channels.all()
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (PK –∞–∫–∫–∞—É–Ω—Ç–∞ == {acc_pk!r}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='Object does not exists')

        channels_lst = [
            {
                "pk": i_ch.pk,
                "channel_id": i_ch.channel_id,
                "channel_name": i_ch.channel_name,
                "channel_link": i_ch.channel_link,
            }
            for i_ch in channels_qset
        ]
        serializer = ChannelsSerializer(channels_lst, many=True)
        return Response(data=serializer.data, status=status.HTTP_200_OK)


class RelatedNewsView(APIView):
    """
    –í—å—é—à–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ
    """

    def get(self, request):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ. –ü–µ—Ä–µ–¥–∞—Ç—å PK –∫–∞–Ω–∞–ª–∞.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ: {request.GET}')

        token = request.query_params.get("token")
        if not token or token != BOT_TOKEN:
            MY_LOGGER.warning(f'–¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ token={token}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='invalid token')

        ch_pk = request.query_params.get("ch_pk")
        if not ch_pk or not ch_pk.isdigit():
            MY_LOGGER.warning(f'ch_pk –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ch_pk={ch_pk}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='invalid channel pk')

        try:
            ch_obj = Channels.objects.get(pk=int(ch_pk))  # TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç Channels –ø–æ PK=={ch_pk}')
            return Response(status=status.HTTP_404_NOT_FOUND, data='channel not found')

        # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ id –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–º–µ
        theme_obj = ch_obj.theme if ch_obj.theme else ch_obj.sub_theme.theme
        ch_qset = Channels.objects.filter(theme=theme_obj).only("id")
        ch_ids_lst = [i_ch.pk for i_ch in ch_qset]

        # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –ø–æ–¥—Ç–µ–º—ã –ø–æ —Ç–µ–º–µ
        sub_themes_qset = SubThemes.objects.filter(theme=theme_obj).only("id")
        sub_themes_ids_lst = [i_sub_theme.pk for i_sub_theme in sub_themes_qset]
        i_ch_qset = Channels.objects.filter(sub_theme__id__in=sub_themes_ids_lst).only("id")
        [ch_ids_lst.append(i_ch.pk) for i_ch in i_ch_qset if i_ch.pk not in ch_ids_lst]

        # –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –ë–î –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ –ø–æ—Å—Ç—ã
        all_posts_lst = []
        i_ch_posts = NewsPosts.objects.filter(channel__id__in=ch_ids_lst).only("text", "embedding")
        for i_post in i_ch_posts:
            all_posts_lst.append({"text": i_post.text, "embedding": i_post.embedding})
        ser = NewsPostsSerializer(all_posts_lst, many=True)
        return Response(data=ser.data, status=status.HTTP_200_OK)

    def post(self, request):
        """
        –ó–∞–ø–∏—Å—å –≤ –ë–î –Ω–æ–≤–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
        """
        MY_LOGGER.info(f'–ü—Ä–∏—à—ë–ª POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {request.POST}')
        ser = WriteNewPostSerializer(data=request.data)
        if ser.is_valid():
            MY_LOGGER.debug(f'–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω')

            if ser.data.get("token") == BOT_TOKEN:
                MY_LOGGER.debug(f'–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω')

                try:
                    ch_obj = Channels.objects.get(pk=ser.data.get("ch_pk"))
                except ObjectDoesNotExist:
                    return Response(data={'result': 'channel object does not exist'})

                NewsPosts.objects.create(channel=ch_obj, text=ser.data.get("text"), embedding=ser.data.get("embedding"))
                return Response(data={'result': 'new post write successfull'}, status=status.HTTP_200_OK)

            else:
                MY_LOGGER.warning(f'–¢–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {ser.data.get("token")}')
                return Response({'result': 'invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        else:
            MY_LOGGER.warning(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ó–∞–ø—Ä–æ—Å: {request.data}')
            return Response({'result': 'Not valid data'}, status.HTTP_400_BAD_REQUEST)


class UploadNewChannels(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (JSON —Ñ–∞–π–ª—ã - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ tgstat).
    """

    def get(self, request):
        """
        –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã–π—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞')

        if not request.user.is_staff:
            MY_LOGGER.warning(f'–Æ–∑–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å staff. –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return redirect(to=f'/admin/login/?next={reverse_lazy("mytlg:upload_new_channels")}')

        context = {}
        return render(request, template_name='mytlg/upload_new_channels.html', context=context)

    def post(self, request):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã JSON —Å –Ω–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ —Ç–µ–ª–µ–≥—Ä–∞–º.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã–π—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞')

        if not request.user.is_staff:
            MY_LOGGER.warning(f'–Æ–∑–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å staff. –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return redirect(to=f'/admin/login/?next={reverse_lazy("mytlg:upload_new_channels")}')

        for i_json_file in request.FILES.getlist("json_files"):
            i_file_dct = json.loads(i_json_file.read().decode('utf-8'))
            theme_obj, theme_created = Themes.objects.get_or_create(
                theme_name=i_file_dct.get("category").lower(),
                defaults={"theme_name": i_file_dct.get("category").lower()},
            )
            MY_LOGGER.debug(f'{"–°–æ–∑–¥–∞–ª–∏" if theme_created else "–î–æ—Å—Ç–∞–ª–∏ –∏–∑ –ë–î"} —Ç–µ–º—É {theme_obj}!')

            i_data = i_file_dct.get("data")
            for i_key, i_val in i_data.items():
                ch_obj, ch_created = Channels.objects.update_or_create(
                    channel_link=i_val[1],
                    defaults={
                        "channel_name": i_key,
                        "channel_link": i_val[1],
                        "subscribers_numb": int(i_val[0]),
                        "theme": theme_obj,
                    }
                )
                MY_LOGGER.debug(f'–ö–∞–Ω–∞–ª {ch_obj} –±—ã–ª {"—Å–æ–∑–¥–∞–Ω" if ch_created else "–æ–±–Ω–æ–≤–ª—ë–Ω"}!')

        subscription_to_new_channels.delay()
        return HttpResponse(content=f'–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª—ã, —Å–ø–∞—Å–∏–±–æ.')


class WriteTasksResults(APIView):
    """
    –í—å—é—à–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
    """
    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')

        ser = WriteTaskResultSerializer(data=request.data)
        if ser.is_valid():
            MY_LOGGER.debug(f'–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω')

            if ser.data.get("token") == BOT_TOKEN:
                MY_LOGGER.debug(f'–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω')

                try:
                    task_obj = AccountTasks.objects.get(pk=int(ser.data.get("task_pk")))
                except ObjectDoesNotExist:
                    return Response(data={'result': 'account task object does not exist'},
                                    status=status.HTTP_404_NOT_FOUND)

                MY_LOGGER.debug(f'–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–æ –∑–∞–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç–∞ c PK=={task_obj.pk}')
                task_obj.execution_result = ser.data.get("results")
                task_obj.fully_completed = ser.data.get("fully_completed")
                task_obj.completed_at = datetime.datetime.now(tz=pytz.timezone(TIME_ZONE))
                task_obj.save()

                tlg_acc = task_obj.tlg_acc

                MY_LOGGER.debug(f'–û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –∫–∞–Ω–∞–ª—ã')
                for i_ch in ser.data.get("results"):
                    try:
                        ch_obj = Channels.objects.get(pk=int(i_ch.get("ch_pk")))
                    except ObjectDoesNotExist:
                        MY_LOGGER.warning(f'–û–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ —Å PK=={i_ch.get("ch_pk")} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
                        continue
                    if not i_ch.get("success"):
                        MY_LOGGER.debug(f'–ö–∞–Ω–∞–ª {ch_obj!r} –∏–º–µ–µ—Ç success=={i_ch.get("success")}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
                        continue
                    ch_obj.channel_id = i_ch.get("ch_id")
                    ch_obj.channel_name = i_ch.get("ch_name")
                    ch_obj.description = i_ch.get("description")
                    ch_obj.subscribers_numb = i_ch.get("subscribers_numb")
                    ch_obj.is_ready = True
                    ch_obj.save()
                    tlg_acc.channels.add(ch_obj)
                    tlg_acc.subscribed_numb_of_channels += 1
                    tlg_acc.save()
                    MY_LOGGER.debug(f'–ö–∞–Ω–∞–ª {ch_obj!r} –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {tlg_acc!r}.')

                return Response(data={'result': 'task result write successful'}, status=status.HTTP_200_OK)

            else:
                MY_LOGGER.warning(f'–¢–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {ser.data.get("token")}')
                return Response({'result': 'invalid token'}, status=status.HTTP_400_BAD_REQUEST)

        else:
            MY_LOGGER.warning(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ó–∞–ø—Ä–æ—Å: {request.data} | –û—à–∏–±–∫–∏: {ser.errors}')
            return Response(data={'result': 'Not valid data'}, status=status.HTTP_400_BAD_REQUEST)


class UpdateChannelsView(APIView):  # TODO: —É–¥–∞–ª–∏—Ç—å –Ω–∞—Ö, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥—ã—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–∞–Ω–∞–ª–æ–≤.
    """
    def post(self, request):
        print(request.data)
        ch_obj = Channels.objects.get(pk=int(request.data.get('pk')))
        ch_obj.channel_id = request.data.get('pk')
        ch_obj.description = request.data.get('pk')
        ch_obj.save()
        return Response(data={'result': f'{ch_obj} | {ch_obj.channel_id} | {ch_obj.description}'}, status=status.HTTP_200_OK)


def test_view(request):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –≤—å—é—à–∫–∞. –¢–µ—Å—Ç–∏–º –≤—Å—è–∫–æ–µ
    """
    # themes = Themes.objects.all()
    # themes_str = '\n'.join([i_theme.theme_name for i_theme in themes])
    # rslt = ask_the_gpt(
    #     base_text=themes_str,
    #     query='–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '
    #           '"–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤, —Å–æ—Å—Ç–∞–≤—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ö–æ–∫–∫–µ–π –∏ –Ω–µ–º–Ω–æ–≥–æ —à–∞—Ö–º–∞—Ç"',
    #     system='–¢—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º '
    #            '—Ç–µ–º–∞—Ç–∏–∫–∞–º. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - '
    #            '—ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º–∞—Ç–∏–∫ (–∫–∞–∂–¥–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å '
    #            '—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, '
    #            '–∫–æ—Ç–æ—Ä–∞—è —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É '
    #            '—Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–∏–∫–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è, –≤—ã–±–∏—Ä–∞–π'
    #            ' —Ç–µ–º–∞—Ç–∏–∫—É —Å—Ç—Ä–æ–≥–æ –∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª'
    # )
    # print(rslt)

    # file_data = b'Hello, Telegram!'  # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞
    # # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª-–±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
    # file_buffer = BytesIO(file_data)
    #
    # files = {
    #     'document': ('myfile.txt', file_data)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º
    # }
    #
    # url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument'
    # data = {'chat_id': 1978587604, 'caption': 'test —Ñ–∞–π–ª–∏–∫'}
    # MY_LOGGER.debug(f'–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}')
    # response = requests.post(url=url, data=data, files=files)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    #
    # # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    # if response.status_code == 200:
    #     print('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    # else:
    #     print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', response.text)
    #
    # return HttpResponse(content=response.text)

    # scheduled_task_example.delay()
    # return HttpResponse(content='okay my friend !', status=200)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–º –∏–Ω—Ñ—ã –æ –∫–∞–Ω–∞–ª–∞—Ö
    MY_LOGGER.info(f'–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –∫–∞–Ω–∞–ª–µ –±–æ—Ç–æ–º')
    send_rslt = requests.post(
        url=f'https://api.telegram.org/bot{BOT_TOKEN}/getChat',
        data={
            'chat_id': '@onIy_crypto',
        }
    )
    if send_rslt.status_code == 200:
        MY_LOGGER.success(f'–£—Å–ø–µ—à–Ω–∞—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–∞ –æ —á–∞—Ç–µ: {send_rslt.json()}')
    else:
        MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {send_rslt.text}')
    return HttpResponse(content='okay my friend !', status=200)