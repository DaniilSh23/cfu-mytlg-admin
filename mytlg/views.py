import datetime

from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.contrib import messages as err_msgs

from cfu_mytlg_admin.settings import MY_LOGGER, BOT_TOKEN
from mytlg.gpt_processing import ask_the_gpt
from mytlg.models import Themes, BotUser, Channels
from mytlg.tasks import gpt_interests_processing


class WriteUsrView(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É WriteUsrView: {request.data}')

        if not request.data.get("token") or request.data.get("token") != BOT_TOKEN:
            MY_LOGGER.warning(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∑–∞–ø—Ä–æ—Å–∞: {request.data.get("token")} != {BOT_TOKEN}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='invalid token')

        MY_LOGGER.debug(f'–ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ –≤ –ë–î')
        bot_usr_obj, created = BotUser.objects.update_or_create(
            tlg_id=request.data.get("tlg_id"),
            defaults={
                "tlg_id": request.data.get("tlg_id"),
                "tlg_username": request.data.get("tlg_username"),
            }
        )
        MY_LOGGER.success(f'–î–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ {"—Å–æ–∑–¥–∞–Ω—ã" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω—ã"} –¥–∞—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.')
        return Response(data=f'success {"write" if created else "update"} object of bot user!',
                        status=status.HTTP_200_OK)


@method_decorator(csrf_exempt, name='dispatch')
class StartSettingsView(View):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    """
    def get(self, request):
        context = {
            "themes": Themes.objects.all()
        }
        return render(request, template_name='mytlg/start_settings.html', context=context)

    @csrf_exempt
    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–Ω–∞–ª–æ–≤. {request.POST}')

        MY_LOGGER.debug(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞')
        tlg_id = request.POST.get("tlg_id")
        selected_channels_lst = request.POST.getlist("selected_channel")
        check_selected_channels = list(map(lambda i_ch: i_ch.isdigit(), selected_channels_lst))
        if not tlg_id or not tlg_id.isdigit() or not all(check_selected_channels):
            MY_LOGGER.warning(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é')
            return HttpResponse(content='Request params is not valid', status=400)

        MY_LOGGER.debug(f'–°–≤—è–∑—ã–≤–∞–µ–º –≤ –ë–î —é–∑–µ—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏')
        try:
            bot_usr_obj = BotUser.objects.get(tlg_id=int(tlg_id))
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–û–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞ —Å tlg_id=={tlg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.')
            return HttpResponse(f'User not found', status=404)

        selected_channels_lst = list(map(lambda i_ch: int(i_ch), selected_channels_lst))
        channels_qset = Channels.objects.filter(pk__in=selected_channels_lst)
        MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —é–∑–µ—Ä—É —Å tlg_id=={tlg_id} –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ '
                        f'PK={selected_channels_lst}\n{channels_qset}')
        bot_usr_obj.channels.set(channels_qset)
        return render(request, template_name='mytlg/success.html')


@method_decorator(decorator=csrf_exempt, name='dispatch')
class WriteInterestsView(View):
    """
    –í—å—é—à–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    def get(self, request):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.')
        context = {
            'interest_examples': (
                '–§—É—Ç–±–æ–ª, –ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏ –≤—Å—ë –≤ —ç—Ç–æ–º –¥—É—Ö–µ',
                '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∞–∫—Ü–∏–∏ —Ç–æ–ø–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π',
                '–ñ–∏–≤–æ—Ç–Ω—ã–µ, –Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∏–ª—ã–µ. –¢–∞–∫–∏–µ –∫–∞–∫ –∫–æ—Ç–∏–∫–∏ –∏ —Å–æ–±–∞—á–∫–∏, –Ω–æ –Ω–µ –∫—Ä–æ–∫–æ–¥–∏–ª—ã –∏ –∑–º–µ–∏.',
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç –≤—Å—ë',
                '–ë–∏–∑–Ω–µ—Å, —Ç–æ –Ω–∞ —á—ë–º –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –ø—Ä–æ—Ä—ã–≤–Ω—ã–µ –∏–¥–µ–∏!'
            )
        }
        return render(request, template_name='mytlg/write_interests.html', context=context)

    def post(self, request):
        """
        –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {request.POST}')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        tlg_id = request.POST.get("tlg_id")
        interests = request.POST.getlist("interest")
        when_send_news = request.POST.get('when_send_news')

        check_interests = [i_interest for i_interest in interests if i_interest != '']
        if len(check_interests) < 1:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã 1 –∏–Ω—Ç–µ—Ä–µ—Å')
            err_msgs.error(request, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã 1 –∏–Ω—Ç–µ—Ä–µ—Å')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        elif not when_send_news:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. '
                              f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
            err_msgs.error(request, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        elif not tlg_id or not tlg_id.isdigit():
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. '
                              f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tlg_id')
            err_msgs.error(request, f'–û—à–∏–±–∫–∞: –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–æ—Ä–º—É –∏–∑ Telegram?')
            return redirect(to=reverse_lazy('mytlg:write_interests'))

        MY_LOGGER.debug(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å GPT –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        gpt_interests_processing.delay(interests=check_interests, tlg_id=tlg_id)

        MY_LOGGER.debug(f'–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
        try:
            bot_usr_obj = BotUser.objects.get(tlg_id=int(tlg_id))
        except ObjectDoesNotExist:
            MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –Æ–∑–µ—Ä —Å tlg_id=={tlg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!')
            err_msgs.error(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ –Ω–∞–π–¥–µ–Ω –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start')
            return redirect(to=reverse_lazy('mytlg:write_interests'))
        bot_usr_obj.when_send_news = when_send_news
        bot_usr_obj.save()

        context = dict(
            header='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
            description=f'üëå –û–∫–µ–π. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –Ω–æ–≤–æ—Å—Ç–∏ üóû –≤ {when_send_news} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
            btn_text='–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!'
        )
        return render(request, template_name='mytlg/success.html', context=context)


def test_view(request):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –≤—å—é—à–∫–∞. –¢–µ—Å—Ç–∏–º –≤—Å—è–∫–æ–µ
    """
    themes = Themes.objects.all()
    themes_str = '\n'.join([i_theme.theme_name for i_theme in themes])
    rslt = ask_the_gpt(
        base_text=themes_str,
        query='–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '
              '"–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤, —Å–æ—Å—Ç–∞–≤—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ö–æ–∫–∫–µ–π –∏ –Ω–µ–º–Ω–æ–≥–æ —à–∞—Ö–º–∞—Ç"',
        system='–¢—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º '
               '—Ç–µ–º–∞—Ç–∏–∫–∞–º. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - '
               '—ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º–∞—Ç–∏–∫ (–∫–∞–∂–¥–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å '
               '—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, '
               '–∫–æ—Ç–æ—Ä–∞—è —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É '
               '—Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–∏–∫–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è, –≤—ã–±–∏—Ä–∞–π'
               ' —Ç–µ–º–∞—Ç–∏–∫—É —Å—Ç—Ä–æ–≥–æ –∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª'
    )
    print(rslt)
    return HttpResponse(content=rslt)