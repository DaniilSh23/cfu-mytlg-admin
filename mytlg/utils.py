import datetime
from socket import socket
from typing import List

import requests
import socks

from cfu_mytlg_admin.settings import MY_LOGGER, BOT_TOKEN


def send_gpt_interests_proc_rslt_to_tlg(gpt_rslts: List, tlg_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å GPT —é–∑–µ—Ä—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    """
    msg_txt = 'üìå –í–æ—Ç, –∫–∞–∫–∏–µ —Ç–µ–º—ã –º–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –í–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º:\n\n'
    for i_theme in gpt_rslts:
        msg_txt = ''.join([msg_txt, f'üîπ {i_theme}\n'])

    MY_LOGGER.info(f'–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    send_rslt = requests.post(
        url=f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
        data={
            'chat_id': tlg_id,
            'text': msg_txt,
        }
    )
    if send_rslt.status_code == 200:
        MY_LOGGER.success('–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º')
    else:
        MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {send_rslt.text}')


def send_err_msg_for_user_to_telegram(err_msg, tlg_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    msg_txt = '‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞:\n\n'
    msg_txt = ''.join([msg_txt, f'‚ùï {err_msg}\n'])

    MY_LOGGER.info(f'–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    send_rslt = requests.post(
        url=f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage',
        data={
            'chat_id': tlg_id,
            'text': msg_txt,
        }
    )
    if send_rslt.status_code == 200:
        MY_LOGGER.success('–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º')
    else:
        MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: {send_rslt.text}')


def send_command_to_bot(command: str, bot_admin, session_file, disable_notification=True):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ —Å—Ç–æ–ø –∞–∫–∫–∞—É–Ω—Ç–∞. –¢–∞–∫–∂–µ —à–ª—ë–º –∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    """
    MY_LOGGER.info(f'–í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É: {command}.')
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument'
    data = {'chat_id': bot_admin, 'caption': command, 'disable_notification': disable_notification}
    with open(file=session_file, mode='rb') as file:
        file_name = session_file.split('/')[-1]
        files = {'document': (file_name, file)}
        MY_LOGGER.debug(f'–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}')
        response = requests.post(url=url, data=data, files=files)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º

    if response.status_code != 200:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        MY_LOGGER.error(f'–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É.\n'
                        f'–ó–∞–ø—Ä–æ—Å: url={url} | data={data}\n'
                        f'–û—Ç–≤–µ—Ç:{response.json()}')
        return
    MY_LOGGER.success(f'–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É.')


def send_message_by_bot(chat_id, text, disable_notification=False) -> bool | None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞
    """
    MY_LOGGER.info(f'–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—É —é–∑–µ—Ä—É {chat_id!r}')
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    data = {'chat_id': chat_id, 'text': text, 'disable_notification': disable_notification}
    MY_LOGGER.debug(f'–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}')
    response = requests.post(url=url, data=data)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

    if response.status_code != 200:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        MY_LOGGER.error(f'–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.\n'
                        f'–ó–∞–ø—Ä–æ—Å: url={url} | data={data}\n'
                        f'–û—Ç–≤–µ—Ç:{response.json()}')
        return
    MY_LOGGER.success(f'–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ —é–∑–µ—Ä—É {chat_id!r}.')
    return True


def send_file_by_bot(chat_id, caption, file, file_name, disable_notification=False) -> bool | None:
    """
    –§—É–∫–Ω—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.
    file - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–π—Ç–æ–≤—ã–º IO –æ–±—ä–µ–∫—Ç–æ–º.
    """
    MY_LOGGER.info(f'–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ —Ñ–∞–π–ª–∞ –≤ —Ç–µ–ª–µ–≥—É —é–∑–µ—Ä—É {chat_id!r}')
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument'
    data = {'chat_id': chat_id, 'caption': caption, 'disable_notification': disable_notification}
    # –¢–µ–ª–µ–≥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–∞—Ä-—Ä–µ document, –≤ –Ω–µ–≥–æ –∫–ª–∞–¥—ë–º –∫–æ—Ä—Ç–µ–∂ —Å –∏–º–µ–Ω–µ–º, IO –æ–±—ä–µ–∫—Ç–æ–º —Ñ–∞–π–ª–∞ –∏ MIME —Ç–∏–ø–æ–º
    files = {'document': (file_name, file, 'text/plain')}
    MY_LOGGER.debug(f'–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data} | {files}')
    response = requests.post(url=url, data=data, files=files)

    if response.status_code != 200:
        MY_LOGGER.error(f'–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.\n'
                        f'–ó–∞–ø—Ä–æ—Å: url={url} | data={data} | files={files}\n'
                        f'–û—Ç–≤–µ—Ç:{response.json()}')
        return
    MY_LOGGER.success(f'–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ —é–∑–µ—Ä—É {chat_id!r}.')
    return True


def bot_command_for_start_or_stop_account(instance, bot_admin, bot_command: str = 'start_acc'):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ —Å—Ç–æ–ø –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    file_name = instance.session_file.path.split('/')[-1]
    command_msg = f'/{bot_command} {instance.pk} {file_name}'
    if bot_command == 'start_acc':
        proxy_str = (f"{instance.proxy.protocol}:{instance.proxy.host}:{instance.proxy.port}:{instance.proxy.username}"
                     f":{instance.proxy.password}")
        command_msg = f"{command_msg} {proxy_str}"

    send_command_to_bot(
        command=command_msg,
        bot_admin=bot_admin,
        session_file=instance.session_file.path,
    )


def check_proxy(protocol, host, port, username=None, password=None):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∫—Å–∏
    url = f'https://t.me'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    proxy_types = {
        'http': socks.HTTP,
        'https': socks.HTTP,
        'socks4': socks.SOCKS4,
        'socks5': socks.SOCKS5,
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    proxy_type = proxy_types[protocol]
    socks.set_default_proxy(proxy_type, host, port, username=username, password=password)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫ —Å–æ–∫–µ—Ç–∞–º
    socket.socket = socks.socksocket

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    proxies = {
        'http': f'{protocol}://{host}:{port}',
        'https': f'{protocol}://{host}:{port}'
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
    if username and password:
        proxies['http'] = f'{protocol}://{username}:{password}@{host}:{port}'
        proxies['https'] = f'{protocol}://{username}:{password}@{host}:{port}'

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        response = requests.get(url, proxies=proxies, timeout=5)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω –ª–∏ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as err:
        MY_LOGGER.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏ {protocol}://{host}:{port} -> {err}')
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ä–∞–±–æ—á–∏–º
        return False


def calculate_sending_datetime(last_send: datetime, when_send: datetime.time = None,
                               send_period: str = None) -> datetime:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    now_dt = datetime.datetime.now()
    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫–∞–∫ now, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    if not send_period or send_period == 'now':
        return now_dt

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    elif send_period == 'fixed_time':
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
        if now_dt.time() < when_send:
            sending_dt = datetime.datetime.combine(
                date=now_dt.date(),
                time=when_send,
            )
        # –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        else:
            sending_dt = datetime.datetime.combine(
                date=(now_dt + datetime.timedelta(days=1)).date(),
                time=when_send,
            )
        return sending_dt

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    else:
        time_shift = datetime.timedelta(hours=when_send.hour, minutes=when_send.minute, seconds=when_send.second)
        return last_send + time_shift
