from mytlg.models import AccountsSubscriptionTasks
from django.core.exceptions import ObjectDoesNotExist
from cfu_mytlg_admin.settings import MY_LOGGER
import datetime

from mytlg.utils import send_message_by_bot


class AccountsSubscriptionTasksService:

    @staticmethod
    def get_account_subscription_tasks_by_pk(pk: int) -> AccountsSubscriptionTasks | None:
        try:
            return AccountsSubscriptionTasks.objects.get(pk=pk)
        except ObjectDoesNotExist:
            MY_LOGGER.info(f'AccountsSubscriptionTasks –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω pk == {pk}')
            return None

    @staticmethod
    def update_task_obj_data(ser, task_obj):
        task_obj.successful_subs = task_obj.successful_subs + ser.validated_data.get("success_subs")
        task_obj.failed_subs = task_obj.failed_subs + ser.validated_data.get("fail_subs")
        task_obj.action_story = f'{ser.validated_data.get("actions_story")}\n{task_obj.action_story}'
        task_obj.status = ser.validated_data.get("status")
        if ser.validated_data.get("end_flag"):
            task_obj.ends_at = datetime.datetime.now()
        task_obj.save()

    @staticmethod
    def send_subscription_notification(success: bool, channel_link: str, user_tlg_id: int):
        """
        –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª.
        :param success: bool - —É—Å–ø–µ—à–Ω–∞—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞.
        :param channel_link: str - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
        :param user_tlg_id: int - telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.
        """
        MY_LOGGER.debug(f'–í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.')
        msg_txt = f'{"üëç –£—Å–ø–µ—à–Ω–∞—è" if success else "üôÖ‚Äç‚ôÇÔ∏è –ù–µ—É–¥–∞—á–Ω–∞—è"} –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª üîó {channel_link}'
        send_message_by_bot(chat_id=user_tlg_id, text=msg_txt)

    @staticmethod
    def get_subscription_tasks_in_works():
        subs_tasks_qset = (AccountsSubscriptionTasks.objects.filter(status='at_work', channels__isnull=False)
                           .only('channels', 'tlg_acc'))
        return subs_tasks_qset

    @staticmethod
    def create_subscription_task(tlg_account, channels):
        task = AccountsSubscriptionTasks.objects.create(tlg_acc=tlg_account)
        task.channels.set(channels)
        return task
