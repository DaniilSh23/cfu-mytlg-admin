import datetime
import json
import time
from io import BytesIO
from typing import List
from celery import shared_task
from django.core.exceptions import ObjectDoesNotExist
from django.db.models import Count

from cfu_mytlg_admin.settings import MY_LOGGER, MAX_CHANNELS_PER_ACC
from mytlg.gpt_processing import ask_the_gpt
from mytlg.models import Themes, Channels, BotUser, SubThemes, NewsPosts, TlgAccounts, AccountTasks, BotSettings
from mytlg.utils import send_gpt_interests_proc_rslt_to_tlg, send_err_msg_for_user_to_telegram, send_message_by_bot, \
    send_file_by_bot


@shared_task
def scheduled_task_example():
    """
    –ü—Ä–∏–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    time.sleep(5)
    print(f'–ü—Ä–∏–≤–µ—Ç –º–∏—Ä, —è –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞. –°–µ–π—á–∞—Å: {datetime.datetime.utcnow()}')


@shared_task
def gpt_interests_processing(interests: List, tlg_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ—Ä–µ–∑ GPT –º–æ–¥–µ–ª—å.
    interests - —Å–ø–∏—Å–æ–∫ —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tlg_id - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    MY_LOGGER.info('–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É celery –ø–æ –æ—Ç–±–æ—Ä—É —Ç–µ–º–∞—Ç–∏–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    MY_LOGGER.debug(f'–°–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º –≤ —Å—Ç—Ä–æ–∫—É')
    themes_qset = Themes.objects.all()
    sub_themes_qset = SubThemes.objects.all()
    all_themes_lst = [i_theme.theme_name for i_theme in themes_qset]
    all_themes_lst.extend([i_sub_th.sub_theme_name for i_sub_th in sub_themes_qset])
    themes_str = '\n'.join([i_theme for i_theme in all_themes_lst])

    MY_LOGGER.debug(f'–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç BotUser –∏ –æ—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ Many2Many –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–µ–º')
    bot_usr = BotUser.objects.get(tlg_id=tlg_id)
    bot_usr.themes.clear()
    bot_usr.channels.clear()

    themes_rslt = list()
    for i_interest in interests:
        MY_LOGGER.debug(f'–®–ª—ë–º –∑–∞–ø—Ä–æ—Å –∫ gpt –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É: {i_interest!r}')
        gpt_rslt = ask_the_gpt(
            base_text=themes_str,
            query=f'–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i_interest}',
            system='–¢—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ '
                   '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - '
                   '—ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º–∞—Ç–∏–∫ (–∫–∞–∂–¥–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å '
                   '—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, '
                   '–∫–æ—Ç–æ—Ä–∞—è —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É '
                   '—Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–∏–∫–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è, '
                   '–≤—ã–±–∏—Ä–∞–π —Ç–µ–º–∞—Ç–∏–∫—É —Å—Ç—Ä–æ–≥–æ –∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç '
                   '–Ω–∏ –ø–æ–¥ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–±–µ —Ç–µ–º–∞—Ç–∏–∫, —Ç–æ –ø—Ä–∏—à–ª–∏ –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É no themes –∏ –Ω–∏–∫–∞–∫–æ–≥–æ '
                   '–±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞.',
            temp=0.3,
        )
        if not gpt_rslt:
            MY_LOGGER.error(f'–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API OpenAI')
            send_err_msg_for_user_to_telegram(err_msg='üòî –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è '
                                                      '–í–∞—Å —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üîÑ', tlg_id=tlg_id)
            return

        MY_LOGGER.debug(f'–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç GPT {gpt_rslt!r} –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i_interest!r}')
        if gpt_rslt == 'no themes':
            MY_LOGGER.info(f'GPT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i_interest!r} –∏ –ø—Ä–∏—Å–ª–∞–ª {gpt_rslt!r}')
            gpt_rslt = 'gpt –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–µ–º—É'
        else:
            MY_LOGGER.debug(f'–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–µ–º–µ –∏ –∫–∞–Ω–∞–ª–∞–º')
            try:
                rel_theme = Themes.objects.get(theme_name=gpt_rslt.lower())
                bot_usr.themes.add(rel_theme)
            except ObjectDoesNotExist:
                try:
                    rel_theme = SubThemes.objects.get(sub_theme_name=gpt_rslt.lower())
                    bot_usr.sub_themes.add(rel_theme)
                except ObjectDoesNotExist:
                    MY_LOGGER.warning(f'–í –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ –∏–ª–∏ –ø–æ–¥—Ç–µ–º–∞: {gpt_rslt!r}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.')
                    continue
        themes_rslt.append(gpt_rslt.lower())

    MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º.')
    send_gpt_interests_proc_rslt_to_tlg(gpt_rslts=themes_rslt, tlg_id=tlg_id)

    MY_LOGGER.info(f'–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞—á–∏ celery –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ—Ä–µ–∑ GPT –º–æ–¥–µ–ª—å.')


@shared_task
def scheduled_task_for_send_post_to_users():
    """
    –ó–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    MY_LOGGER.info(f'–í—ã–∑–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')

    news_posts_qset = NewsPosts.objects.filter(is_sent=False).only('text', 'channel').prefetch_related('channel')
    for i_post in news_posts_qset:
        # –î–æ—Å—Ç–∞—ë–º —é–∑–µ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–≤
        bot_users_qset = BotUser.objects.filter(themes=i_post.channel.theme).only('tlg_id')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ–º —ç—Ç–∏–º —é–∑–µ—Ä–∞–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç
        for i_bot_user in bot_users_qset:
            send_message_by_bot(chat_id=i_bot_user.tlg_id, text=i_post.text)
        # –ö–æ–≥–¥–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É –∑–∞–∫–æ–Ω—á–µ–Ω–∞, —Å—Ç–∞–≤–∏–º –≤ –ë–î –ø–æ—Å—Ç—É —Ñ–ª–∞–≥ is_sent=True
        i_post.is_sent = True
        i_post.save()

    MY_LOGGER.info(f'–û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


@shared_task
def subscription_to_new_channels():
    """
    –¢–∞—Å–∫ —Å–µ–ª–µ—Ä–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.
    """
    MY_LOGGER.info(f'–ó–∞–ø—É—â–µ–Ω —Ç–∞—Å–∫ —Å–µ–ª–µ—Ä–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.')

    max_ch_per_acc = int(BotSettings.objects.get(key='max_channels_per_acc').value),
    acc_qset = TlgAccounts.objects.annotate(num_ch=Count('channels')).filter(num_ch__lt=max_ch_per_acc, is_run=True)
    ch_lst = list(Channels.objects.filter(is_ready=False))
    for i_acc in acc_qset:
        ch_available_numb = max_ch_per_acc - i_acc.channels.count()    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        i_acc_channels_lst = ch_lst[:ch_available_numb]     # –°—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

        MY_LOGGER.debug(f'–°–æ–∑–¥–∞—ë–º –≤ –ë–î –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç—É')
        command_data = {
            "cmd": "subscribe_to_channels",
            "data": [(i_ch.pk, i_ch.channel_link) for i_ch in i_acc_channels_lst],
        }
        acc_task = AccountTasks.objects.create(
            task_name='–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã',
            tlg_acc=i_acc,
            initial_data=json.dumps(command_data),
        )

        MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∑–∞–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç—É')
        command_data['task_pk'] = acc_task.pk
        task_is_set = send_file_by_bot(
            chat_id=i_acc.acc_tlg_id,
            caption=f"/subscribe_to_channels",
            file=BytesIO(json.dumps(command_data).encode(encoding='utf-8')),
            file_name='command_data.txt',
        )
        if not task_is_set:
            MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞–¥–∞—á—É! {i_acc!r}')
            acc_task.delete()   # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∑–∞–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç–∞
            continue

        ch_lst = ch_lst[ch_available_numb - 1:]     # –û—Ç—Ä–µ–∑–∞–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç
        if len(ch_lst) < 0:
            MY_LOGGER.debug('–°–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º')
            break

    MY_LOGGER.info(f'–¢–∞—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')

