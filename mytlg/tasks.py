import datetime
import json
import time
from io import BytesIO
from typing import List, Dict

import pytz
from celery import shared_task
from django.core.exceptions import ObjectDoesNotExist
from django.db.models import Count
from langchain.embeddings import OpenAIEmbeddings

from cfu_mytlg_admin.settings import MY_LOGGER, TIME_ZONE
from mytlg.gpt_processing import ask_the_gpt, gpt_text_language_detection_and_translate
from mytlg.models import Categories, Channels, BotUser, NewsPosts, TlgAccounts, AccountsSubscriptionTasks, BotSettings, \
    Interests, ScheduledPosts
from mytlg.utils import send_gpt_interests_proc_rslt_to_tlg, send_err_msg_for_user_to_telegram, send_message_by_bot, \
    send_file_by_bot, bot_command_for_start_or_stop_account


@shared_task
def scheduled_task_example():
    """
    –ü—Ä–∏–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    time.sleep(5)
    print(f'–ü—Ä–∏–≤–µ—Ç –º–∏—Ä, —è –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞. –°–µ–π—á–∞—Å: {datetime.datetime.utcnow()}')


@shared_task
def gpt_interests_processing(interests, tlg_id):
    # TODO: —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞. –ù—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ–¥–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –Ω–∏—Ö
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ—Ä–µ–∑ GPT –º–æ–¥–µ–ª–∏.
    interests - —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏, –≥–¥–µ –ª–µ–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
    tlg_id - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    MY_LOGGER.info('–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É celery –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    MY_LOGGER.debug(f'–°–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫—É')
    categories_qset = Categories.objects.all()
    all_categories_lst = [category.category_name for category in categories_qset]
    categories_str = '\n'.join([category for category in all_categories_lst])

    MY_LOGGER.debug(f'–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç BotUser –∏ –æ—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ Many2Many –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–µ–º')
    bot_usr = BotUser.objects.get(tlg_id=tlg_id)
    bot_usr.category.clear()
    bot_usr.channels.clear()

    themes_rslt = list()
    prompt = BotSettings.objects.get(key='prompt_for_interests_category').value
    for i_interest in interests:

        # –ü–∏–ª–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
        MY_LOGGER.debug(f'–ü–∏–ª–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞: {i_interest.get("interest")}')
        embeddings = OpenAIEmbeddings(max_retries=2)
        # TODO: —ç—Ç—É —Ö—É–π–Ω—é –Ω–∞–¥–æ –≤ try-except, –Ω–æ —è –Ω–µ –≤—å–µ—Ö–∞–ª —á–µ —Ç–∞–º —ç–∫–∑–µ–ø—Ç–∏—Ç—å—Å—è –º–æ–∂–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —è —É–∂–µ –∑–∞–µ–±–∞–ª—Å—è –∏ –≤—ã–ø–∏–ª

        # –ü–∏–ª–∏–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–º–µ—Ç–æ–¥—É join –Ω—É–∂–Ω–∞ str, –∞ –Ω–µ float)
        i_interest["embedding"] = ' '.join(
            map(lambda elem: str(elem), embeddings.embed_query(text=i_interest.get("interest")))
        )

        MY_LOGGER.debug(f'–®–ª—ë–º –∑–∞–ø—Ä–æ—Å –∫ gpt –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞: {i_interest.get("interest")!r}')
        gpt_rslt = ask_the_gpt(
            base_text=categories_str,
            query=f'–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i_interest.get("interest")}',
            system=prompt,
            temp=0.3,
        )
        if not gpt_rslt:
            MY_LOGGER.error(f'–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API OpenAI')
            send_err_msg_for_user_to_telegram(err_msg='üòî –°–µ—Ä–≤–µ—Ä—ã –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è '
                                                      '–í–∞—Å —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üîÑ', tlg_id=tlg_id)
            return

        MY_LOGGER.debug(f'–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç GPT {gpt_rslt!r} –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i_interest.get("interest")!r}')
        if gpt_rslt == 'no_themes':
            MY_LOGGER.info(f'GPT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {i_interest.get("interest")!r} '
                           f'–∏ –ø—Ä–∏—Å–ª–∞–ª {gpt_rslt!r}. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —é–∑–µ—Ä–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç')
            gpt_rslt = '–æ–±—â–µ–µ üÜï'
            category, created = Categories.objects.get_or_create(
                category_name='—Ç–µ—Å—Ç',
                defaults={"category_name": "—Ç–µ—Å—Ç"}
            )
        else:
            MY_LOGGER.debug(f'–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–Ω–∞–ª–∞–º')
            try:
                category = Categories.objects.get(category_name=gpt_rslt.lower())
            except ObjectDoesNotExist:
                MY_LOGGER.warning(f'–í –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {gpt_rslt!r}. '
                                  f'–ü—Ä–∏–≤—è–∑—ã–≤–µ–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "—Ç–µ—Å—Ç".')
                category, created = Categories.objects.get_or_create(
                    category_name='—Ç–µ—Å—Ç',
                    defaults={"category_name": "—Ç–µ—Å—Ç"}
                )

        bot_usr.category.add(category)
        i_interest["category"] = category
        themes_rslt.append(gpt_rslt.lower())
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–µ—á–∫–∞, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å OpenAI –Ω–µ –æ—Ö—É–µ–ª–∞ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        # TODO: –Ω–∞–¥–æ –¥–æ–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏ –∏ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Ö –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏

    MY_LOGGER.debug(f'–°–æ–∑–¥–∞—ë–º –∑–∞ —Ä–∞–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –¥–ª—è –º–æ–¥–µ–ª–∏ Interests')
    interests_objs = []
    for interest in interests:
        interest['bot_user'] = bot_usr
        interests_objs.append(Interests(**interest))
    Interests.objects.bulk_create(interests_objs)

    MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º.')
    send_gpt_interests_proc_rslt_to_tlg(gpt_rslts=themes_rslt, tlg_id=tlg_id)

    MY_LOGGER.info(f'–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞—á–∏ celery –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')


@shared_task
def scheduled_task_for_send_post_to_users():
    """
    –ó–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    MY_LOGGER.info(f'–í—ã–∑–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')

    # –î–æ—Å—Ç–∞—ë–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    posts = ScheduledPosts.objects.filter(
        is_sent=False,
        when_send__lte=datetime.datetime.now(tz=pytz.timezone(TIME_ZONE))
    ).prefetch_related("bot_user").prefetch_related("news_post")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    prompt = BotSettings.objects.get(key='promt_for_detect_and_translate_posts_language').value
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot_user_ids = set(posts.values_list('bot_user', flat=True))
    bot_users = BotUser.objects.filter(id__in=bot_user_ids)

    interests_ids = list()  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

    # –ü–æ–æ—á–µ—Ä–µ–¥–∏ –¥–æ—Å—Ç–∞—ë–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    for i_usr in bot_users:
        i_usr_posts = posts.filter(bot_user=i_usr)
        posts_str = 'üóû –ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –í–∞—Å:'
        for i_post in i_usr_posts:

            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º
            if len(i_post.news_post.short_text) + len(posts_str) >= 2000:
                send_result = send_message_by_bot(chat_id=i_usr.tlg_id, text=f"{posts_str}\n{'‚ûñ'*10}",
                                                  disable_notification=True)
                if not send_result:
                    MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ —é–∑–µ—Ä—É {i_usr!r}')
                    break
                posts_str = f'üóû –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...'

            original_short_text = i_post.news_post.short_text
            short_text = gpt_text_language_detection_and_translate(prompt=prompt,
                                                                   text=original_short_text,
                                                                   user_language_code=i_usr.language_code,
                                                                   temp=0.3)
            posts_str = f"{posts_str}\n\nüì∞ {short_text}\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª: {i_post.news_post.post_link}\n{'‚ûñ'*10}"

        MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–æ–≤ —é–∑–µ—Ä—É {i_usr!r}')
        send_result = send_message_by_bot(chat_id=i_usr.tlg_id, text=posts_str)
        if not send_result:
            MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–æ–≤ —é–∑–µ—Ä—É {i_usr!r}')
            continue

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_sent —É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤
        i_usr_posts.update(is_sent=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫—Ä–∞–π–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    Interests.objects.filter(id__in=set(interests_ids)).update(
        last_send=datetime.datetime.now(tz=pytz.timezone(TIME_ZONE))
    )

    MY_LOGGER.info(f'–û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


@shared_task
def subscription_to_new_channels():
    """
    –¢–∞—Å–∫ —Å–µ–ª–µ—Ä–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.
    """
    MY_LOGGER.info(f'–ó–∞–ø—É—â–µ–Ω —Ç–∞—Å–∫ —Å–µ–ª–µ—Ä–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.')

    max_ch_per_acc = int(BotSettings.objects.get(key='max_channels_per_acc').value)

    # –ë–µ—Ä—ë–º –∞–∫–∫–∞—É–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —á–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤ < —á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è max_ch_per_acc
    acc_qset = (TlgAccounts.objects.annotate(num_ch=Count('channels')).filter(num_ch__lt=max_ch_per_acc, is_run=True)
                .only("channels", "acc_tlg_id").prefetch_related("channels"))

    # –î–æ—Å—Ç–∞—ë–º —Ç–∞—Å–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–∞–±–æ—Ç–µ –∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    subs_tasks_qset = (AccountsSubscriptionTasks.objects.filter(status='at_work', channels__isnull=False)
                       .only('channels', 'tlg_acc'))

    # # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å ID –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–µ –Ω–∞–¥–æ.
    # –¢—É—Ç –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã.
    excluded_ids = [channel.id for task in subs_tasks_qset
                    for channel in task.channels.all()]
    # –¢—É—Ç –∏—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞ –Ω–∏—Ö –ø–æ–¥–ø–∏—Å–∞–Ω—ã.
    accs = TlgAccounts.objects.filter(is_run=True).only('channels').prefetch_related('channels')
    for i_acc in accs:
        excluded_ids.extend([i_ch.id for i_ch in i_acc.channels.all()])
    excluded_ids = list(set(excluded_ids))  # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –¥—É–±–ª–µ–π

    # –î–æ—Å—Ç–∞—ë–º –∫–∞–Ω–∞–ª—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    ch_lst = Channels.objects.filter(is_ready=False).exclude(id__in=excluded_ids).only("id", "channel_link")
    for i_acc in acc_qset:
        ch_available_numb = max_ch_per_acc - i_acc.channels.count()  # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∞–∫–∫
        i_acc_channels_lst = ch_lst[:ch_available_numb]  # –°—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

        MY_LOGGER.debug(f'–°–æ–∑–¥–∞—ë–º –≤ –ë–î –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç—É')
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞ (–µ—ë –¥–∞–Ω–Ω—ã–µ)
        command_data = {
            "cmd": "subscribe_to_channels",
            "data": [(i_ch.pk, i_ch.channel_link) for i_ch in i_acc_channels_lst],
        }
        acc_task = AccountsSubscriptionTasks.objects.create(
            total_channels=len(i_acc_channels_lst),
            tlg_acc=i_acc,
            initial_data=json.dumps(command_data),
        )
        acc_task.channels.add(*i_acc_channels_lst)

        MY_LOGGER.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∑–∞–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç—É')
        command_data['task_pk'] = acc_task.pk
        task_is_set = send_file_by_bot(
            chat_id=i_acc.acc_tlg_id,
            caption=f"/subscribe_to_channels",
            file=BytesIO(json.dumps(command_data).encode(encoding='utf-8')),
            file_name='command_data.txt',
        )
        if not task_is_set:
            MY_LOGGER.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—É –∑–∞–¥–∞—á—É! {i_acc!r}')
            acc_task.delete()  # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∑–∞–¥–∞—á—É –∞–∫–∫–∞—É–Ω—Ç–∞
            continue

        ch_lst = ch_lst[ch_available_numb:]  # –û—Ç—Ä–µ–∑–∞–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç
        if len(ch_lst) <= 0:
            MY_LOGGER.debug('–°–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º')
            break
    MY_LOGGER.info(f'–¢–∞—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


@shared_task
def start_or_stop_accounts(bot_command='start_acc'):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ celery –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.
    """
    MY_LOGGER.debug(f'–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ —Å—Ç–æ–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
    tlg_accounts = TlgAccounts.objects.filter(is_run=True).only("id", "session_file", "proxy").prefetch_related("proxy")
    bot_admin = BotSettings.objects.get(key='bot_admins').value.split()[0]
    for i_acc in tlg_accounts:
        bot_command_for_start_or_stop_account(instance=i_acc, bot_command=bot_command, bot_admin=bot_admin)
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω–∫ —Ç–∞—Å–∫–∏
    MY_LOGGER.debug(f'–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
